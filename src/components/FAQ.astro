---
import { Icon } from "astro-icon/components";

export interface FAQItem {
  question: string;
  answer: string;
}

export interface Props {
  title: string;
  subtitle: string;
  faqs: FAQItem[];
}

const { title, subtitle, faqs } = Astro.props;
---

<div class="py-24 px-8 max-w-5xl mx-auto flex flex-col gap-12 justify-center items-center">
  <div class="flex flex-col text-center basis-1/2 text-tertiary">
    <p class="sm:text-4xl text-3xl font-extrabold text-base-content text-tertiary">{title}</p>
    <p class="inline-block font-semibold text-primary mb-4">{subtitle}</p>
  </div>
  <ul class="basis-1/2">
    {
      faqs.map((faq, index) => (
        <li>
          <button
            class="relative flex gap-2 items-center w-full py-5 text-base font-semibold text-left border-t md:text-lg border-base-content/10"
            aria-expanded="false"
            data-index={index}
          >
            <span class="flex-1 text-base-content">{faq.question}</span>
            <Icon
              name="chevron"
              class="text-tertiary flex-shrink-0 w-4 h-4 ml-auto fill-current transition-transform duration-300"
              height={20}
              width={20}
              id="chevron"
            />
          </button>
          <div
            class="transition-all duration-300 ease-in-out max-h-0 overflow-hidden"
            style="transition: max-height 0.3s ease-in-out 0s;"
          >
            <div class="pb-5 leading-relaxed">
              <div class="space-y-2 leading-relaxed">{faq.answer}</div>
            </div>
          </div>
        </li>
      ))
    }
  </ul>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll("button[aria-expanded]");
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const content = button.nextElementSibling;
        const svg = button.querySelector("svg");
        const isOpen = button.getAttribute("aria-expanded") === "true";

        button.setAttribute("aria-expanded", (!isOpen).toString());

        if (content) {
          content.style.maxHeight = !isOpen ? `${content.scrollHeight}px` : "0";
        }

        if (svg) {
          svg.style.transform = !isOpen ? "rotate(180deg)" : "rotate(0deg)";
        }
      });
    });
  });
</script>
